import { dbClient } from "@db/client.js";
import { roomQueue, songs, listeningRooms, songStats } from "@db/schema.js";
import { eq, asc, desc, sql, and } from "drizzle-orm";

export async function fetchYoutubeMetadata(videoId: string) {
  const apiKey = process.env.YOUTUBE_API_KEY;
  const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=${videoId}&key=${apiKey}`;

  const res = await fetch(url);
  if (!res.ok) throw new Error("YouTube API error");

  const data: any = await res.json();

  if (!data.items || data.items.length === 0) {
    throw new Error("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏ô YouTube");
  }

  const item = data.items[0];
  const title = item.snippet.title;
  const artist = item.snippet.channelTitle;
  const coverUrl = item.snippet.thumbnails?.high?.url || null;

  const durationISO = item.contentDetails.duration;
  const duration = parseISO8601Duration(durationISO);

  return { title, artist, coverUrl, duration };
}

function parseISO8601Duration(iso: string): number {
  const match = iso.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
  const hours = parseInt(match?.[1] || "0", 10);
  const minutes = parseInt(match?.[2] || "0", 10);
  const seconds = parseInt(match?.[3] || "0", 10);
  return hours * 3600 + minutes * 60 + seconds;
}

function sanitizeSong(song: any) {
  if (!song) return null;
  return {
    id: song.id,
    youtubeVideoId: song.youtubeVideoId,
    title: song.title,
    artist: song.artist,
    coverUrl: song.coverUrl,
    duration: song.duration,
  };
}

function sanitizeQueueItem(item: any) {
  return {
    id: item.id,
    queueIndex: item.queueIndex,
    queuedBy: item.queuedBy,
    song: sanitizeSong(item.song),
  };
}

// Helper: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï song_stats
async function updateSongStats(songId: string) {
  const now = new Date();
  await dbClient
    .insert(songStats)
    .values({
      songId: songId,
      playCount: 1,
      lastPlayedAt: now,
    })
    .onConflictDoUpdate({
      target: songStats.songId,
      set: {
        playCount: sql`${songStats.playCount} + 1`,
        lastPlayedAt: now,
      },
    });
}

// ---------- SOCKET ----------
export async function addToQueue(io: any, { roomId, songId, userId }: any) {
  const last = await dbClient.query.roomQueue.findFirst({
    where: eq(roomQueue.roomId, roomId),
    orderBy: desc(roomQueue.queueIndex),
  });
  const newIndex = (last?.queueIndex ?? -1) + 1;

  await dbClient.insert(roomQueue).values({
    roomId,
    songId,
    queuedBy: userId,
    queueIndex: newIndex,
  });

  const fullQueue = await dbClient
    .select({
      id: roomQueue.id,
      queueIndex: roomQueue.queueIndex,
      queuedBy: roomQueue.queuedBy,
      song: {
        id: songs.id,
        youtubeVideoId: songs.youtubeVideoId,
        title: songs.title,
        artist: songs.artist,
        coverUrl: songs.coverUrl,
        duration: songs.duration,
      },
    })
    .from(roomQueue)
    .leftJoin(songs, eq(roomQueue.songId, songs.id))
    .where(eq(roomQueue.roomId, roomId))
    .orderBy(asc(roomQueue.queueIndex));

  io.to(roomId).emit("queue-sync", { queue: fullQueue.map(sanitizeQueueItem) });

  //‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const [listening] = await dbClient
    .select({ currentSongId: listeningRooms.currentSongId })
    .from(listeningRooms)
    .where(eq(listeningRooms.id, roomId));

  if (!listening?.currentSongId && fullQueue.length > 0) {
    await playNextSong(io, roomId);
  }
}

export async function removeFromQueue(io: any, { roomId, queueId }: any) {
  console.log("üóëÔ∏è removeFromQueue called:", { roomId, queueId });

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ queueId ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [queueItem] = await dbClient
    .select({ id: roomQueue.id, songId: roomQueue.songId })
    .from(roomQueue)
    .where(eq(roomQueue.id, queueId));

  if (!queueItem) {
    console.log("‚ö†Ô∏è Queue item not found, already removed");
    return;
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [listening] = await dbClient
    .select({ currentSongId: listeningRooms.currentSongId })
    .from(listeningRooms)
    .where(eq(listeningRooms.id, roomId));

  // ‡∏î‡∏∂‡∏á queue item ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ songId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö currentSongId
  const [currentPlayingItem] = await dbClient
    .select({ id: roomQueue.id })
    .from(roomQueue)
    .where(
      and(
        eq(roomQueue.roomId, roomId),
        eq(roomQueue.songId, listening?.currentSongId || "")
      )
    )
    .orderBy(asc(roomQueue.queueIndex))
    .limit(1);

  // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÄ‡∏£‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö queueId ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
  const isCurrentlyPlaying = currentPlayingItem?.id === queueId;

  console.log("üîç Debug info:", {
    queueIdToRemove: queueId,
    currentPlayingQueueId: currentPlayingItem?.id,
    currentSongId: listening?.currentSongId,
    queueItemSongId: queueItem.songId,
    isCurrentlyPlaying
  });

  console.log("üéµ Is currently playing?", isCurrentlyPlaying);

  console.log("üéµ Is currently playing?", isCurrentlyPlaying);

  // ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
  await dbClient.delete(roomQueue).where(eq(roomQueue.id, queueId));

  // Reindex ‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
  const remainingItems = await dbClient
    .select()
    .from(roomQueue)
    .where(eq(roomQueue.roomId, roomId))
    .orderBy(asc(roomQueue.queueIndex));

  console.log("üìã Remaining items after delete:", remainingItems.length);

  await dbClient.transaction(async (tx: any) => {
    for (let i = 0; i < remainingItems.length; i++) {
      await tx
        .update(roomQueue)
        .set({ queueIndex: i })
        .where(eq(roomQueue.id, remainingItems[i].id));
    }
  });

  // ‡∏™‡πà‡∏á queue ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ client
  const fullQueue = await dbClient
    .select({
      id: roomQueue.id,
      queueIndex: roomQueue.queueIndex,
      queuedBy: roomQueue.queuedBy,
      song: {
        id: songs.id,
        youtubeVideoId: songs.youtubeVideoId,
        title: songs.title,
        artist: songs.artist,
        coverUrl: songs.coverUrl,
        duration: songs.duration,
      },
    })
    .from(roomQueue)
    .leftJoin(songs, eq(roomQueue.songId, songs.id))
    .where(eq(roomQueue.roomId, roomId))
    .orderBy(asc(roomQueue.queueIndex));

  io.to(roomId).emit("queue-sync", { queue: fullQueue.map(sanitizeQueueItem) });

  // üî• ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡πÉ‡∏´‡πâ skip ‡πÑ‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
  if (isCurrentlyPlaying) {
    console.log("‚≠ê Current song removed, playing next without deleting from queue");
    
    // ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const [nextQueueItem] = await dbClient
      .select({
        id: roomQueue.id,
        songId: roomQueue.songId,
        song: {
          id: songs.id,
          youtubeVideoId: songs.youtubeVideoId,
          title: songs.title,
          artist: songs.artist,
          coverUrl: songs.coverUrl,
          duration: songs.duration,
        },
      })
      .from(roomQueue)
      .leftJoin(songs, eq(roomQueue.songId, songs.id))
      .where(eq(roomQueue.roomId, roomId))
      .orderBy(asc(roomQueue.queueIndex))
      .limit(1);

    const now = new Date();

    if (nextQueueItem) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó listening room ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      await dbClient.update(listeningRooms)
        .set({ currentSongId: nextQueueItem.songId, currentStartedAt: now })
        .where(eq(listeningRooms.id, roomId));

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï song_stats
      await updateSongStats(nextQueueItem.songId);

      io.to(roomId).emit("now-playing", {
        roomId,
        song: sanitizeSong(nextQueueItem.song),
        startedAt: now,
      });
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      await dbClient.update(listeningRooms)
        .set({ currentSongId: null, currentStartedAt: null })
        .where(eq(listeningRooms.id, roomId));

      io.to(roomId).emit("now-playing", { roomId, song: null, startedAt: null });
    }
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á process ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const processingRooms = new Map<string, boolean>();

export async function playNextSong(io: any, roomId: string) {
  if (processingRooms.get(roomId)) {
    console.log("‚ö†Ô∏è playNextSong already processing for room:", roomId);
    return;
  }

  processingRooms.set(roomId, true);

  try {
    console.log("‚≠ê playNextSong called for room:", roomId);

    const [nextQueueItem] = await dbClient
      .select({
        id: roomQueue.id,
        songId: roomQueue.songId,
        queueIndex: roomQueue.queueIndex,
        song: {
          id: songs.id,
          youtubeVideoId: songs.youtubeVideoId,
          title: songs.title,
          artist: songs.artist,
          coverUrl: songs.coverUrl,
          duration: songs.duration,
        },
      })
      .from(roomQueue)
      .leftJoin(songs, eq(roomQueue.songId, songs.id))
      .where(eq(roomQueue.roomId, roomId))
      .orderBy(asc(roomQueue.queueIndex))
      .limit(1);

    const now = new Date();

    if (nextQueueItem) {
      console.log("üéµ Playing next song:", nextQueueItem.song?.title);

      await dbClient.update(listeningRooms)
        .set({ currentSongId: nextQueueItem.songId, currentStartedAt: now })
        .where(eq(listeningRooms.id, roomId));

      // üÜï ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï song_stats ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
      await updateSongStats(nextQueueItem.songId);

      // ‡∏™‡πà‡∏á now-playing ‡∏û‡∏£‡πâ‡∏≠‡∏° queueId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ frontend ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏´‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
      io.to(roomId).emit("now-playing", {
        roomId,
        song: {
          ...sanitizeSong(nextQueueItem.song),
          queueId: nextQueueItem.id  // ‡πÄ‡∏û‡∏¥‡πà‡∏° queueId
        },
        startedAt: now,
      });

      // ‚ö†Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue!
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏ö (song-ended) ‡∏´‡∏£‡∏∑‡∏≠ skip ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏•‡∏ö

    } else {
      console.log("üõë No more songs in queue");

      await dbClient.update(listeningRooms)
        .set({ currentSongId: null, currentStartedAt: null })
        .where(eq(listeningRooms.id, roomId));

      io.to(roomId).emit("now-playing", { roomId, song: null, startedAt: null });
    }

    // ‡∏™‡πà‡∏á queue ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏¢‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢)
    const fullQueue = await dbClient
      .select({
        id: roomQueue.id,
        queueIndex: roomQueue.queueIndex,
        queuedBy: roomQueue.queuedBy,
        song: {
          id: songs.id,
          youtubeVideoId: songs.youtubeVideoId,
          title: songs.title,
          artist: songs.artist,
          coverUrl: songs.coverUrl,
          duration: songs.duration,
        },
      })
      .from(roomQueue)
      .leftJoin(songs, eq(roomQueue.songId, songs.id))
      .where(eq(roomQueue.roomId, roomId))
      .orderBy(asc(roomQueue.queueIndex));

    io.to(roomId).emit("queue-sync", { queue: fullQueue.map(sanitizeQueueItem) });

  } finally {
    setTimeout(() => {
      processingRooms.delete(roomId);
    }, 1000);
  }
}

export async function playSong(io: any, { roomId, song }: any) {
  const now = new Date();
  await dbClient.update(listeningRooms)
    .set({ currentSongId: song.id, currentStartedAt: now })
    .where(eq(listeningRooms.id, roomId));

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï song_stats
  await updateSongStats(song.id);

  io.to(roomId).emit("now-playing", {
    roomId,
    song: sanitizeSong(song),
    startedAt: now,
  });
}

export async function reorderQueue(io: any, { roomId, queueId, newIndex }: any) {
  // ‡∏î‡∏∂‡∏á queue ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const allItems = await dbClient
    .select()
    .from(roomQueue)
    .where(eq(roomQueue.roomId, roomId))
    .orderBy(asc(roomQueue.queueIndex));

  if (allItems.length === 0) return;

  const itemToMove = allItems.find(item => item.id === queueId);
  if (!itemToMove) return;

  const oldIndex = itemToMove.queueIndex;
  if (oldIndex === newIndex) return;

  // remove item ‡∏à‡∏≤‡∏Å array
  const filtered = allItems.filter(item => item.id !== queueId);
  filtered.splice(newIndex, 0, itemToMove);

  // ‡πÉ‡∏ä‡πâ transaction ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  await dbClient.transaction(async (tx: any) => {
    // ‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏£‡∏Å assign ‡∏Ñ‡πà‡∏≤ temporary ‡∏™‡∏π‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ duplicate
    for (let i = 0; i < filtered.length; i++) {
      await tx
        .update(roomQueue)
        .set({ queueIndex: 1000 + i }) // temporary index
        .where(eq(roomQueue.id, filtered[i].id));
    }

    // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô normalize ‡πÄ‡∏õ‡πá‡∏ô 0,1,2,...
    for (let i = 0; i < filtered.length; i++) {
      await tx
        .update(roomQueue)
        .set({ queueIndex: i })
        .where(eq(roomQueue.id, filtered[i].id));
    }
  });

  // ‡∏™‡πà‡∏á queue ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ client
  const fullQueue = await dbClient
    .select({
      id: roomQueue.id,
      queueIndex: roomQueue.queueIndex,
      queuedBy: roomQueue.queuedBy,
      song: {
        id: songs.id,
        youtubeVideoId: songs.youtubeVideoId,
        title: songs.title,
        artist: songs.artist,
        coverUrl: songs.coverUrl,
        duration: songs.duration,
      },
    })
    .from(roomQueue)
    .leftJoin(songs, eq(roomQueue.songId, songs.id))
    .where(eq(roomQueue.roomId, roomId))
    .orderBy(asc(roomQueue.queueIndex));

  io.to(roomId).emit("queue-sync", { queue: fullQueue.map(sanitizeQueueItem) });
}